namespace dbarone_api.Entities;
using dbarone_api.Lib.Data;
using dbarone_api.Lib.Validation;
using System.Text.Json.Serialization;
using Markdig;

/// <summary>
/// Type type of post content.
/// </summary>
public enum PostType
{
    /// <summary>
    /// Markdown used for content.
    /// </summary>
    MARKDOWN,
    /// <summary>
    /// HTML used for content.
    /// </summary>
    HTML
}

/// <summary>
/// Represents a post in the database.
/// </summary>
public class Post
{
    /// <summary>
    /// The primary key / surrogate id of the post.
    /// </summary>
    [Key(Order = 1)]
    [AutoGenerated(sequenceName: "PostSeq", onInsert: true)]
    public int Id { get; set; }

    /// <summary>
    /// The post title.
    /// </summary>
    [RequiredValidator]
    [StringLengthValidator(Min = 1, Max = 250)]
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// The post slug.
    /// </summary>
    [StringLengthValidator(Min = 1, Max = 250)]
    public string? Slug { get; set; }

    /// <summary>
    /// The post teaser content.
    /// </summary>
    [RequiredValidator]
    [StringLengthValidator(Min = 1, Max = 1000)]
    public string? Teaser { get; set; } = string.Empty;

    /// <summary>
    /// The post main body content. Is always rendered as HTML.
    /// </summary>
    [RequiredValidator]
    [StringLengthValidator(Min = 1, Max = Int16.MaxValue)]
    public string Content { get; set; } = string.Empty;

    /// <summary>
    /// The post code content.
    /// </summary>
    [StringLengthValidator(Min = 0, Max = Int16.MaxValue)]
    public string? Code { get; set; }

    /// <summary>
    /// The post style content.
    /// </summary>
    [StringLengthValidator(Min = 0, Max = Int16.MaxValue)]
    public string? Style { get; set; }

    /// <summary>
    /// The post head content.
    /// </summary>
    [StringLengthValidator(Min = 0, Max = Int16.MaxValue)]
    public string? Head { get; set; }

    /// <summary>
    /// The post type of content.
    /// </summary>

    [Column("PostType", EnumColumnBehaviour = EnumColumnBehaviourEnum.STRING)]
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public PostType PostType { get; set; } = PostType.HTML;

    /// <summary>
    /// The post parent id.
    /// </summary>
    public int? ParentId { get; set; }

    /// <summary>
    /// The post created date.
    /// </summary>
    [AutoGenerated(useCurrentDateTime: true, onInsert: true)]
    public DateTime CreatedDt { get; set; }

    /// <summary>
    /// The post created by.
    /// </summary>
    [AutoGenerated(useCurrentUser: true, onInsert: true)]
    public string CreatedBy { get; set; } = string.Empty;

    /// <summary>
    /// The post updated date.
    /// </summary>
    [AutoGenerated(useCurrentDateTime: true, onInsert: true, onUpdate: true)]

    public DateTime UpdatedDt { get; set; }
    /// <summary>
    /// The post updated date.
    /// </summary>
    [AutoGenerated(useCurrentUser: true, onInsert: true, onUpdate: true)]
    public string UpdatedBy { get; set; } = string.Empty;

    /// <summary>
    /// Read only property. Set to true if the post is a child post.
    /// </summary>
    [NotMapped]
    public bool IsChild => this.ParentId != null;
}

/// <summary>
/// Version of the post used for rendering. Includes a ContentHtml property.
/// </summary>
[Table("Post")]
public class PostHtml : Post
{
    /// <summary>
    /// The formatted content. Returns markdown or HTML.
    /// </summary>
    public string ContentHtml
    {
        get
        {
            // Convert markdown to html?
            if (this.PostType == PostType.MARKDOWN)
            {
                var pipeline = new MarkdownPipelineBuilder()
                    .UseAdvancedExtensions()
                    .Build();
                return Markdown.ToHtml(this.Content, pipeline);
            }
            else
            {
                return this.Content;
            }
        }
    }

}